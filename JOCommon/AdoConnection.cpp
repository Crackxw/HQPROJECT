

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Filename: AdoConnection.cpp

Author: 檜團熱 <nshangukin@joyon.com>
Currently Managed by: 檜團熱

Description:

Requirements:

History:

Last updated:

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "AdoConnection.h"
#include <crtdbg.h>
#include <tchar.h>
#include "Defines.h"

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

CAdoConnection::CAdoConnection()
{
#ifdef _DEBUG
	m_nTrans = 0;
#endif

	m_pConnection = NULL;
	m_strConnection = "";
	m_strLastError = "";
	m_dwLastError = 0;	
	m_pConnection.CreateInstance(__uuidof(Connection));
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

CAdoConnection::~CAdoConnection()
{
	Close();
	m_pConnection.Release();
	m_pConnection = NULL;
	m_strConnection = "";
	m_strLastError = "";
	m_dwLastError = 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

HRESULT CAdoConnection::Open(LPCTSTR _lpstrConnection)
{
	HRESULT hr = S_OK;

	if(_lpstrConnection == NULL)
		return ADO_CONNECT_STRING_NULL;
	
	if(!IsOpen()){ // if closed.
		if(strlen(_lpstrConnection) > 0){
			m_strConnection = _lpstrConnection;
		}
		else
			return ADO_CONNECT_STRING_NULL;

		try{
			hr = m_pConnection->Open(_bstr_t(m_strConnection), "", "", NULL);
			return hr == S_OK ? ADO_CONNECT_SUCCEED : ADO_CONNECT_FAILED;
		}
		catch(_com_error& e){
			dump_com_error(e);
			return ADO_CONNECT_FAILED;
		}
	}

	return ADO_CONNECT_SUCCEED;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::Execute(LPCTSTR lpstrExec)
{
	try
	{
		m_pConnection->Execute(_bstr_t(lpstrExec), NULL, adExecuteNoRecords);
		return true;
	}
	catch(_com_error &e)
	{
		dump_com_error(e);
		return false;	
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

DWORD CAdoConnection::GetRecordCount(_RecordsetPtr _pRs)
{
	DWORD dwNumRows = 0;

	dwNumRows = _pRs->GetRecordCount();

	if(dwNumRows == -1){
		if(_pRs->EndOfFile != VARIANT_TRUE)
			_pRs->MoveFirst();
		while(_pRs->EndOfFile != VARIANT_TRUE){
			dwNumRows++;
			_pRs->MoveNext();
		}

		if(dwNumRows > 0)
			_pRs->MoveFirst();
	}
	return dwNumRows;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::IsOpen() const
{
	if(m_pConnection)
		return m_pConnection->GetState() != adStateClosed;
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void CAdoConnection::Close()
{
	if(IsOpen())
		m_pConnection->Close();
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::BeginTrans()
{
#ifdef _DEBUG
	_ASSERTE(m_nTrans==0);
#endif
	if(!IsOpen())
		return false;

	try{
		m_pConnection->BeginTrans();
#ifdef _DEBUG
		++m_nTrans;
#endif
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::CommitTrans()
{
#ifdef _DEBUG
	_ASSERTE(m_nTrans==1);
#endif
	if(!IsOpen())
		return false;

	try{
		m_pConnection->CommitTrans();
#ifdef _DEBUG
		--m_nTrans;
#endif
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::RollbackTrans()
{
#ifdef _DEBUG
	_ASSERTE(m_nTrans==1);
#endif
	if(!IsOpen())
		return false;
	try{
		m_pConnection->RollbackTrans();
#ifdef _DEBUG
		--m_nTrans;
#endif
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::SetIsolationLevel(IsolationLevelEnum eLevel)
{
	if(!IsOpen())
		return false;

	try{
		m_pConnection->PutIsolationLevel(eLevel);
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}

	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::SetConnectionTimeout(long lTimeout)
{
	if(!IsOpen())
		return false;

	try{
		m_pConnection->PutConnectionTimeout(lTimeout);
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::SetCommandTimeout(long lTimeout)
{
	if(!IsOpen())
		return false;

	try{
		m_pConnection->PutCommandTimeout(lTimeout);
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

bool CAdoConnection::SetMode(ConnectModeEnum eMode)
{
	if(m_pConnection == NULL)
		return false;

	try{
		m_pConnection->PutMode(eMode);
		return true;
	}
	catch(_com_error& e){
		dump_com_error(e);
		return false;
	}

	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void CAdoConnection::SetConnectionString(LPCTSTR lpstrConnection)
{
	m_strConnection = lpstrConnection;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

LPCTSTR CAdoConnection::GetConnectionString()
{
	return m_strConnection;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

LPCTSTR CAdoConnection::GetLastErrorString()
{
	return m_strLastError;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

DWORD CAdoConnection::GetLastError()
{
	return m_dwLastError;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

_ConnectionPtr CAdoConnection::GetActiveConnection()
{
	return m_pConnection;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

void CAdoConnection::dump_com_error(_com_error& e)
{
	_bstr_t bstrSource		(e.Source());
	_bstr_t bstrDescription	(e.Description());
	char	szSource[256] = {0,};
	char	szDescription[512] = {0,};
	char	szBuf[1024] = {0,};

	strncpy(szSource, bstrSource, 256);
	strncpy(szDescription, bstrDescription, 512);
	
	sprintf(szBuf, "meaning = %lx\nSource = %s\nDescription = %s", 
		szSource, szDescription);

	m_LogWriter.PrintF("AdoError.Log", "Code = %lx\n%s", 
		e.Error(), szBuf );
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////