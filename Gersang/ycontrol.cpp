#include <GSL.h>
#include <main.h>
#include <Mouse.h>
#include <clGame.h>

#include "..\Gersang\YOkCancel.h"

#define	YCONTROL_TEXT_COLOR						(RGB(150, 150, 0))
#define	YCONTROL_LIST_BOX_BORDER_COLOR			(RGB(255, 255, 255))

extern	_clGame					*pGame;
extern _InputDevice				IpD;

//////////////////////////////////////////////////////////////////////////////////////////////////
/// _YControl::_YControl()
//////////////////////////////////////////////////////////////////////////////////////////////////
_YControl::_YControl()
{
	ZeroMemory(m_ControlName, sizeof(m_ControlName));

	m_x = 0;
	m_y = 0;

	m_Controlx = 0;
	m_Controly = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
/// _YControl::~_YControl()
//////////////////////////////////////////////////////////////////////////////////////////////////
_YControl::~_YControl()
{
}

//////////////////////////////////////////////////////////////////////////////////////////////////
/// void _YControl::Init()
//////////////////////////////////////////////////////////////////////////////////////////////////
void _YControl::Init()
{
	HDC		hdc;
	SIZE	strSize;	

	if(clGrp.lpDDSBack->GetDC(&hdc) == DD_OK)
	{		
		GetTextExtentPoint32(hdc, m_ControlName, strlen(m_ControlName),  &strSize);

		clGrp.lpDDSBack->ReleaseDC(hdc);
	}

	m_Controlx =  SHORT(m_x + strSize.cx);
	m_Controly =  m_y;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
/// void _YControl::Draw()
//////////////////////////////////////////////////////////////////////////////////////////////////
void _YControl::Draw()
{
	HDC		hdc;			

	if(clGrp.lpDDSBack->GetDC(&hdc) == DD_OK)
	{
		SetBkMode(hdc, TRANSPARENT );	
		SetTextColor( hdc, YCONTROL_TEXT_COLOR);

		TextOut(hdc, m_x, m_y, m_ControlName, strlen(m_ControlName)); 

		clGrp.lpDDSBack->ReleaseDC(hdc);
	}	
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : BOOL	_YControl::IsInMouse()
/// 목적 : 컨트롤 안에 마우스가 있는 지 검사한다.
////////////////////////////////////////////////////////////////////////////////////////////////
BOOL _YControl::IsInMouse()
{
	if(((m_x < IpD.Mouse_X) && (m_x+m_Controlx) > IpD.Mouse_X) && 
		((m_y < IpD.Mouse_Y) && (m_y+m_Controly) > IpD.Mouse_Y))
		return TRUE;
	else
		return FALSE;	
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : _TextInput::_TextInput()
/// 목적 : 텍스트를 입력받는 클래스..
////////////////////////////////////////////////////////////////////////////////////////////////
_TextInput::_TextInput()
{
	m_IsAction = FALSE;
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : VOID _TextInput::_TextInput()
/// 목적 : 클래스를 생성한다.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _TextInput::Create(SHORT x, SHORT y, SHORT width, SHORT height)
{
	m_x			=		x;
	m_y			=		y;
	m_Controlx	=	width;
	m_Controly	=	height;
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : VOID _TextInput::Action(BOOL bPush)
/// 목적 : 기본적인 활동을 하는 부분.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _TextInput::Action(BOOL bPush)
{
	if(m_IsAction == TRUE)
	{	
		if((IsInMouse()==FALSE) && (bPush==TRUE))
			m_IsAction =	FALSE;
		else
		{
		}
	}
	else 
	{
		if(IsInMouse() == TRUE && (bPush==TRUE))		
			m_IsAction	=	TRUE;		
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : VOID _TextInput::Draw(HDC hdc)
/// 목적 : 입력받은 텍스트를 찍어 주는 함수.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _TextInput::Draw(HDC hdc)
{	
/*	SIZE		size;		

	strcpy(m_szText, GameEditBox.GetEditString());
	m_nStrlen = lstrlen(GameEditBox.GetEditString());

	//문자열의 크기를 구한다.
	GetTextExtentPoint32(hdc, m_szText, m_nStrlen, &size);	
	TextOut(hdc, m_x, m_y, m_szText, m_nStrlen);

	//밑줄을 그린다.
	if((timeGetTime() % 200) < 100)
		TextOut(hdc, m_x + size.cx,  m_y, "_", strlen("_"));
		*/
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 : SHORT _TextInput::GetText(CHAR*	lpszTextBuffer)
/// 목적 : 
////////////////////////////////////////////////////////////////////////////////////////////////
SHORT	 _TextInput::GetText(CHAR*	lpszTextBuffer)
{
	strncpy(lpszTextBuffer, m_szText, m_nStrlen);
	return m_nStrlen;
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  _YOutPutMessage::_YOutPutMessage()
/// 목적 : 메세지를 출력한다.
////////////////////////////////////////////////////////////////////////////////////////////////
_YOutPutMessage::_YOutPutMessage()
{	
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  _YOutPutMessage::~_YOutPutMessage()
/// 목적 : 메세지를 출력한다.
////////////////////////////////////////////////////////////////////////////////////////////////
_YOutPutMessage::~_YOutPutMessage()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  VOID _YOutPutMessage::Create(SHORT x, SHORT y, SHORT width, SHORT height)
/// 목적 : 컨트롤을 생성한다.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _YOutPutMessage::Create(SHORT x, SHORT y, SHORT width, SHORT height)
{
	m_x			= x;
	m_y			= y;

	m_Controlx	= width;
	m_Controly	= height;	
	m_DelayTime	= 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  VOID _YOutPutMessage::SetText(CHAR* lpszMsg)
/// 목적 : 화면에 출력할 텍스트를 설정한다.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _YOutPutMessage::SetText(CHAR* lpszMsg)
{
	if(lpszMsg)
	{
		strcpy(m_ControlName, lpszMsg);
		m_DelayTime		=	CONTROL_OUTPUTMESSAGE_DEFAULT_DELAY;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  VOID _YOutPutMessage::Draw(HDC	hdc)
/// 목적 : 화면에 텍스트를 출력한다.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _YOutPutMessage::Draw()
{
	HDC		hdc;
	SIZE	size;
	SHORT	x, y;

	if(m_DelayTime)
	{
		if(clGrp.lpDDSBack->GetDC(&hdc) == DD_OK)
		{
			SetBkMode(hdc, TRANSPARENT );
			SelectObject(hdc, pGame->pBattle->BriefingFont);		
			SetTextColor( hdc, YCONTROL_TEXT_COLOR);

			GetTextExtentPoint32(hdc, m_ControlName, strlen(m_ControlName),  &size);
		
			x = (m_x + (m_Controlx / 2)) - (size.cx / 2);
			y = (m_y + (m_Controly / 2)) - (size.cy / 2);
			
			TextOut(hdc, x, y, m_ControlName, strlen(m_ControlName));

			clGrp.lpDDSBack->ReleaseDC(hdc);
		}	
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////
/// 함수 :  VOID _YOutPutMessage::Action()
/// 목적 : 화면에 텍스트를 출력한다.
////////////////////////////////////////////////////////////////////////////////////////////////
VOID _YOutPutMessage::Action()
{
	if(m_DelayTime)
		m_DelayTime--;
}
